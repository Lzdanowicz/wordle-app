{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzdanowicz/Desktop/wordle-app/src/components/Container.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InputRow from './InputRow';\nimport GuessRow from './GuessRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst Container = () => {\n  _s();\n  const [targetWord, setTargetWord] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(Array(WORD_LENGTH).fill(''));\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n\n  // Fetch random word on mount\n  useEffect(() => {\n    fetchRandomWord();\n  }, []);\n  const fetchRandomWord = async () => {\n    try {\n      const response = await axios.get(RANDOM_WORD_API);\n      const word = response.data[0];\n      setTargetWord(word);\n    } catch (error) {\n      console.error('Error fetching word:', error);\n      alert('Failed to load word. Try again.');\n    }\n  };\n  const handleSubmit = () => {\n    const guess = currentGuess.join('');\n    if (guess.length !== WORD_LENGTH) return alert('Enter a valid word!');\n    setGuesses([...guesses, guess]);\n    if (guess === targetWord) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (guesses.length + 1 >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n  };\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n    setIsWinner(false);\n    setIsGameOver(false);\n    fetchRandomWord();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-5\",\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), guesses.map((guess, index) => /*#__PURE__*/_jsxDEV(GuessRow, {\n      word: guess,\n      targetWord: targetWord\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)), !isGameOver && /*#__PURE__*/_jsxDEV(InputRow, {\n      currentGuess: currentGuess,\n      setCurrentGuess: setCurrentGuess,\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: isWinner ? 'You won!' : `Game Over! Word was ${targetWord}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-3 px-4 py-2 bg-blue-500 text-white\",\n        onClick: handleRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Container, \"1bGXBMMsvVIBq6Gbgexs2npnTDo=\");\n_c = Container;\nexport default Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","useState","useEffect","axios","InputRow","GuessRow","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_GUESSES","Container","_s","targetWord","setTargetWord","guesses","setGuesses","currentGuess","setCurrentGuess","Array","fill","isGameOver","setIsGameOver","isWinner","setIsWinner","fetchRandomWord","response","get","RANDOM_WORD_API","word","data","error","console","alert","handleSubmit","guess","join","length","handleRestart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onSubmit","onClick","_c","$RefreshReg$"],"sources":["/Users/lukaszzdanowicz/Desktop/wordle-app/src/components/Container.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InputRow from './InputRow';\nimport GuessRow from './GuessRow';\n\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\nconst Container: React.FC = () => {\n  const [targetWord, setTargetWord] = useState<string>('');\n  const [guesses, setGuesses] = useState<string[]>([]);\n  const [currentGuess, setCurrentGuess] = useState<string[]>(Array(WORD_LENGTH).fill(''));\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n\n  // Fetch random word on mount\n  useEffect(() => {\n    fetchRandomWord();\n  }, []);\n\n\n  const fetchRandomWord = async () => {\n    try {\n      const response = await axios.get(RANDOM_WORD_API);\n      const word = response.data[0];\n      setTargetWord(word);\n    } catch (error) {\n      console.error('Error fetching word:', error);\n      alert('Failed to load word. Try again.');\n    }\n  };\n\n  const handleSubmit = () => {\n    const guess = currentGuess.join('');\n    if (guess.length !== WORD_LENGTH) return alert('Enter a valid word!');\n    setGuesses([...guesses, guess]);\n\n    if (guess === targetWord) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (guesses.length + 1 >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n  };\n\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n    setIsWinner(false);\n    setIsGameOver(false);\n    fetchRandomWord();\n  };\n\n  return (\n    <div className=\"flex flex-col items-center mt-10\">\n      <h1 className=\"text-3xl font-bold mb-5\">Wordle Clone</h1>\n      {guesses.map((guess, index) => (\n        <GuessRow key={index} word={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <InputRow\n          currentGuess={currentGuess}\n          setCurrentGuess={setCurrentGuess}\n          onSubmit={handleSubmit}\n        />\n      )}\n      {isGameOver && (\n        <div className=\"mt-5\">\n          <p>{isWinner ? 'You won!' : `Game Over! Word was ${targetWord}`}</p>\n          <button className=\"mt-3 px-4 py-2 bg-blue-500 text-white\" onClick={handleRestart}>\n            Restart\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Container;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzdanowicz/Desktop/wordle-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\n\n// Types for letter status\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Constants\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst RANDOM_WORD_API = 'https://api.api-ninjas.com/v1/randomword';\nconst API_KEY = 'IYg9EWn+jy/xf3SOrJlmJQ==Ek1bMBj7kZA99RZ2';\nconst App = () => {\n  _s();\n  const [targetWord, setTargetWord] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(Array(WORD_LENGTH).fill(''));\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n\n  // Refs for input fields\n  const inputRefs = useRef(Array(WORD_LENGTH).fill(null));\n\n  // Fetch a random word when the component mounts\n  useEffect(() => {\n    fetchRandomWord();\n  }, []);\n  const fetchRandomWord = async () => {\n    try {\n      const response = await axios.get(RANDOM_WORD_API, {\n        headers: {\n          'X-Api-Key': API_KEY\n        }\n      });\n      const word = response.data.word[0].toUpperCase();\n      if (word.length === WORD_LENGTH) {\n        setTargetWord(word);\n      } else {\n        // Retry if the word is not 5 letters\n        fetchRandomWord();\n      }\n    } catch (error) {\n      console.error('Error fetching word:', error);\n      alert('Failed to load a random word. Please try again.');\n    }\n  };\n\n  // Handle input changes and move focus to the next box\n  const handleChange = (index, e) => {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]?$/.test(value)) {\n      const newGuess = [...currentGuess];\n      newGuess[index] = value;\n      setCurrentGuess(newGuess);\n      if (value && index < WORD_LENGTH - 1) {\n        var _inputRefs$current;\n        (_inputRefs$current = inputRefs.current[index + 1]) === null || _inputRefs$current === void 0 ? void 0 : _inputRefs$current.focus();\n      }\n    }\n  };\n  const handleKeyDown = (index, e) => {\n    if (e.key === 'Backspace' && !currentGuess[index] && index > 0) {\n      var _inputRefs$current2;\n      (_inputRefs$current2 = inputRefs.current[index - 1]) === null || _inputRefs$current2 === void 0 ? void 0 : _inputRefs$current2.focus();\n    }\n    if (e.key === 'Enter') handleSubmit();\n  };\n  const handleSubmit = () => {\n    const guessString = currentGuess.join('');\n    if (guessString.length !== WORD_LENGTH) {\n      alert('Please complete your guess.');\n      return;\n    }\n    const newGuess = {\n      letters: currentGuess.map((char, index) => ({\n        value: char,\n        status: getLetterStatus(char, index)\n      }))\n    };\n    const newGuesses = [...guesses, newGuess];\n    setGuesses(newGuesses);\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n    if (guessString === targetWord) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (newGuesses.length >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n  };\n  const getLetterStatus = (char, index) => {\n    if (targetWord[index] === char) return 'correct';\n    if (targetWord.includes(char)) return 'present';\n    return 'absent';\n  };\n  const handleRestart = () => {\n    var _inputRefs$current$;\n    setGuesses([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n    setIsGameOver(false);\n    setIsWinner(false);\n    fetchRandomWord(); // Fetch a new word\n    (_inputRefs$current$ = inputRefs.current[0]) === null || _inputRefs$current$ === void 0 ? void 0 : _inputRefs$current$.focus();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      children: guess.letters.map((letter, j) => /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          display: 'inline-block',\n          width: '30px',\n          height: '30px',\n          lineHeight: '30px',\n          border: '1px solid black',\n          margin: '0 5px',\n          backgroundColor: letter.status === 'correct' ? 'green' : letter.status === 'present' ? 'yellow' : 'gray',\n          color: letter.status === 'present' ? 'black' : 'white',\n          textTransform: 'uppercase'\n        },\n        children: letter.value\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)), !isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      children: currentGuess.map((_, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: 1,\n        value: currentGuess[index],\n        onChange: e => handleChange(index, e),\n        onKeyDown: e => handleKeyDown(index, e),\n        ref: el => inputRefs.current[index] = el,\n        style: {\n          width: '30px',\n          height: '30px',\n          textAlign: 'center',\n          margin: '0 5px',\n          textTransform: 'uppercase'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), !isGameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: isWinner ? 'Congratulations! You guessed the word!' : `Game Over! The word was: ${targetWord}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vbrACBO0QLx3bgfLl4YwGUczA0M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_GUESSES","RANDOM_WORD_API","API_KEY","App","_s","targetWord","setTargetWord","guesses","setGuesses","currentGuess","setCurrentGuess","Array","fill","isGameOver","setIsGameOver","isWinner","setIsWinner","inputRefs","fetchRandomWord","response","get","headers","word","data","toUpperCase","length","error","console","alert","handleChange","index","e","value","target","test","newGuess","_inputRefs$current","current","focus","handleKeyDown","key","_inputRefs$current2","handleSubmit","guessString","join","letters","map","char","status","getLetterStatus","newGuesses","includes","handleRestart","_inputRefs$current$","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","guess","i","margin","letter","j","display","width","height","lineHeight","border","backgroundColor","color","textTransform","_","type","maxLength","onChange","onKeyDown","ref","el","onClick","_c","$RefreshReg$"],"sources":["/Users/lukaszzdanowicz/Desktop/wordle-app/src/App.tsx"],"sourcesContent":["import React, { useState, useRef, ChangeEvent, KeyboardEvent, useEffect } from 'react';\nimport axios from 'axios';\n\n// Types for letter status\ntype LetterStatus = 'correct' | 'present' | 'absent';\n\ninterface Letter {\n  value: string;\n  status: LetterStatus;\n}\n\ninterface Guess {\n  letters: Letter[];\n}\n\n// Constants\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst RANDOM_WORD_API = 'https://api.api-ninjas.com/v1/randomword';\nconst API_KEY = 'IYg9EWn+jy/xf3SOrJlmJQ==Ek1bMBj7kZA99RZ2';\n\nconst App: React.FC = () => {\n  const [targetWord, setTargetWord] = useState<string>('');\n  const [guesses, setGuesses] = useState<Guess[]>([]);\n  const [currentGuess, setCurrentGuess] = useState<string[]>(Array(WORD_LENGTH).fill(''));\n  const [isGameOver, setIsGameOver] = useState<boolean>(false);\n  const [isWinner, setIsWinner] = useState<boolean>(false);\n\n  // Refs for input fields\n  const inputRefs = useRef<Array<HTMLInputElement | null>>(Array(WORD_LENGTH).fill(null));\n\n  // Fetch a random word when the component mounts\n  useEffect(() => {\n    fetchRandomWord();\n  }, []);\n\n  const fetchRandomWord = async () => {\n    try {\n      const response = await axios.get(RANDOM_WORD_API, {\n        headers: { 'X-Api-Key': API_KEY },\n      });\n\n      const word = response.data.word[0].toUpperCase();\n      if (word.length === WORD_LENGTH) {\n        setTargetWord(word);\n      } else {\n        // Retry if the word is not 5 letters\n        fetchRandomWord();\n      }\n    } catch (error) {\n      console.error('Error fetching word:', error);\n      alert('Failed to load a random word. Please try again.');\n    }\n  };\n\n  // Handle input changes and move focus to the next box\n  const handleChange = (index: number, e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]?$/.test(value)) {\n      const newGuess = [...currentGuess];\n      newGuess[index] = value;\n      setCurrentGuess(newGuess);\n\n      if (value && index < WORD_LENGTH - 1) {\n        inputRefs.current[index + 1]?.focus();\n      }\n    }\n  };\n\n  const handleKeyDown = (index: number, e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Backspace' && !currentGuess[index] && index > 0) {\n      inputRefs.current[index - 1]?.focus();\n    }\n    if (e.key === 'Enter') handleSubmit();\n  };\n\n  const handleSubmit = () => {\n    const guessString = currentGuess.join('');\n    if (guessString.length !== WORD_LENGTH) {\n      alert('Please complete your guess.');\n      return;\n    }\n\n    const newGuess: Guess = {\n      letters: currentGuess.map((char, index) => ({\n        value: char,\n        status: getLetterStatus(char, index),\n      })),\n    };\n\n    const newGuesses = [...guesses, newGuess];\n    setGuesses(newGuesses);\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n\n    if (guessString === targetWord) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (newGuesses.length >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n  };\n\n  const getLetterStatus = (char: string, index: number): LetterStatus => {\n    if (targetWord[index] === char) return 'correct';\n    if (targetWord.includes(char)) return 'present';\n    return 'absent';\n  };\n\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n    setIsGameOver(false);\n    setIsWinner(false);\n    fetchRandomWord(); // Fetch a new word\n    inputRefs.current[0]?.focus();\n  };\n\n  return (\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\n      <h1>Wordle Clone</h1>\n\n      {guesses.map((guess, i) => (\n        <div key={i} style={{ margin: '10px 0' }}>\n          {guess.letters.map((letter, j) => (\n            <span\n              key={j}\n              style={{\n                display: 'inline-block',\n                width: '30px',\n                height: '30px',\n                lineHeight: '30px',\n                border: '1px solid black',\n                margin: '0 5px',\n                backgroundColor:\n                  letter.status === 'correct'\n                    ? 'green'\n                    : letter.status === 'present'\n                    ? 'yellow'\n                    : 'gray',\n                color: letter.status === 'present' ? 'black' : 'white',\n                textTransform: 'uppercase',\n              }}\n            >\n              {letter.value}\n            </span>\n          ))}\n        </div>\n      ))}\n\n      {!isGameOver && (\n        <div style={{ margin: '10px 0' }}>\n          {currentGuess.map((_, index) => (\n            <input\n              key={index}\n              type=\"text\"\n              maxLength={1}\n              value={currentGuess[index]}\n              onChange={(e) => handleChange(index, e)}\n              onKeyDown={(e) => handleKeyDown(index, e)}\n              ref={(el) => (inputRefs.current[index] = el)}\n              style={{\n                width: '30px',\n                height: '30px',\n                textAlign: 'center',\n                margin: '0 5px',\n                textTransform: 'uppercase',\n              }}\n            />\n          ))}\n        </div>\n      )}\n\n      {!isGameOver && (\n        <button onClick={handleSubmit} style={{ marginTop: '10px' }}>\n          Submit\n        </button>\n      )}\n\n      {isGameOver && (\n        <div>\n          <p>\n            {isWinner\n              ? 'Congratulations! You guessed the word!'\n              : `Game Over! The word was: ${targetWord}`}\n          </p>\n          <button onClick={handleRestart}>Restart</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
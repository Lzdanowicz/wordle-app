{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzdanowicz/Desktop/wordle-app/src/components/Container.tsx\",\n  _s = $RefreshSig$();\n// Container.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InputRow from './InputRow';\nimport GuessRow from './GuessRow';\nimport Keyboard from './Keyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RANDOM_WORD_API = 'https://random-word-api.vercel.app/api?words=1&length=5';\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst Container = () => {\n  _s();\n  const [targetWord, setTargetWord] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(Array(WORD_LENGTH).fill(''));\n  const [letterStatuses, setLetterStatuses] = useState({});\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n  useEffect(() => {\n    fetchRandomWord();\n  }, []);\n  const fetchRandomWord = async () => {\n    try {\n      const response = await axios.get(RANDOM_WORD_API);\n      const word = response.data[0];\n      console.log(word);\n      setTargetWord(word);\n    } catch (error) {\n      console.error('Error fetching word:', error);\n      alert('Failed to load word. Try again.');\n    }\n  };\n  const updateLetterStatuses = guess => {\n    const newStatuses = {\n      ...letterStatuses\n    };\n    guess.split('').forEach((char, index) => {\n      const lowerCaseChat = char.toLocaleLowerCase();\n      if (lowerCaseChat === targetWord[index]) {\n        newStatuses[lowerCaseChat] = 'correct'; // Correct position\n      } else if (targetWord.includes(lowerCaseChat) && newStatuses[lowerCaseChat] !== 'correct') {\n        newStatuses[lowerCaseChat] = 'present'; // Present but wrong position\n      } else if (!targetWord.includes(lowerCaseChat)) {\n        newStatuses[lowerCaseChat] = 'absent'; // Not present at all\n      }\n    });\n    setLetterStatuses(newStatuses);\n  };\n  const handleSubmit = () => {\n    const guess = currentGuess.join('');\n    if (guess.length !== WORD_LENGTH) return;\n    setGuesses([...guesses, guess]);\n    updateLetterStatuses(guess);\n    if (guess === targetWord) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (guesses.length + 1 >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n    setCurrentGuess(Array(WORD_LENGTH).fill('')); // Reset current guess\n  };\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n    setLetterStatuses({});\n    setIsWinner(false);\n    setIsGameOver(false);\n    fetchRandomWord();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-5\",\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-3 mb-5\",\n      children: guesses.map((guess, index) => /*#__PURE__*/_jsxDEV(GuessRow, {\n        word: guess,\n        targetWord: targetWord\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), !isGameOver && /*#__PURE__*/_jsxDEV(InputRow, {\n      currentGuess: currentGuess,\n      setCurrentGuess: setCurrentGuess,\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: isWinner ? 'You won!' : `Game Over! The word was ${targetWord}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-3 px-4 py-2 bg-blue-500 text-white rounded\",\n        onClick: handleRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Keyboard, {\n        letterStatuses: letterStatuses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Container, \"KMMIFpuYWQ9yjDP/Yb4UupizCx8=\");\n_c = Container;\nexport default Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","useState","useEffect","axios","InputRow","GuessRow","Keyboard","jsxDEV","_jsxDEV","RANDOM_WORD_API","WORD_LENGTH","MAX_GUESSES","Container","_s","targetWord","setTargetWord","guesses","setGuesses","currentGuess","setCurrentGuess","Array","fill","letterStatuses","setLetterStatuses","isGameOver","setIsGameOver","isWinner","setIsWinner","fetchRandomWord","response","get","word","data","console","log","error","alert","updateLetterStatuses","guess","newStatuses","split","forEach","char","index","lowerCaseChat","toLocaleLowerCase","includes","handleSubmit","join","length","handleRestart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onSubmit","onClick","_c","$RefreshReg$"],"sources":["/Users/lukaszzdanowicz/Desktop/wordle-app/src/components/Container.tsx"],"sourcesContent":["// Container.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InputRow from './InputRow';\nimport GuessRow from './GuessRow';\nimport Keyboard from './Keyboard';\n\nconst RANDOM_WORD_API = 'https://random-word-api.vercel.app/api?words=1&length=5';\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\ninterface LetterStatuses {\n  [key: string]: 'correct' | 'present' | 'absent';\n}\n\nconst Container: React.FC = () => {\n  const [targetWord, setTargetWord] = useState<string>('');\n  const [guesses, setGuesses] = useState<string[]>([]);\n  const [currentGuess, setCurrentGuess] = useState<string[]>(Array(WORD_LENGTH).fill(''));\n  const [letterStatuses, setLetterStatuses] = useState<LetterStatuses>({});\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n\n  useEffect(() => {\n    fetchRandomWord();\n  }, []);\n\n  const fetchRandomWord = async () => {\n    try {\n      const response = await axios.get(RANDOM_WORD_API);\n      const word = response.data[0];\n      console.log(word)\n      setTargetWord(word);\n    } catch (error) {\n      console.error('Error fetching word:', error);\n      alert('Failed to load word. Try again.');\n    }\n  };\n\n  const updateLetterStatuses = (guess: string) => {\n    const newStatuses: LetterStatuses = { ...letterStatuses };\n\n    guess.split('').forEach((char, index) => {\n      const lowerCaseChat = char.toLocaleLowerCase();\n      if (lowerCaseChat === targetWord[index]) {\n        newStatuses[lowerCaseChat] = 'correct'; // Correct position\n      } else if (targetWord.includes(lowerCaseChat) && newStatuses[lowerCaseChat] !== 'correct') {\n        newStatuses[lowerCaseChat] = 'present'; // Present but wrong position\n      } else if (!targetWord.includes(lowerCaseChat)) {\n        newStatuses[lowerCaseChat] = 'absent'; // Not present at all\n      }\n    });\n\n    setLetterStatuses(newStatuses);\n  };\n\n  const handleSubmit = () => {\n    const guess = currentGuess.join('');\n    if (guess.length !== WORD_LENGTH) return;\n\n    setGuesses([...guesses, guess]);\n    updateLetterStatuses(guess);\n\n    if (guess === targetWord) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (guesses.length + 1 >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n\n    setCurrentGuess(Array(WORD_LENGTH).fill('')); // Reset current guess\n  };\n\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(''));\n    setLetterStatuses({});\n    setIsWinner(false);\n    setIsGameOver(false);\n    fetchRandomWord();\n  };\n\n  return (\n    <div className=\"flex flex-col items-center mt-10\">\n      <h1 className=\"text-3xl font-bold mb-5\">Wordle Clone</h1>\n      <div className=\"space-y-3 mb-5\">\n        {guesses.map((guess, index) => (\n          <GuessRow key={index} word={guess} targetWord={targetWord} />\n        ))}\n      </div>\n      {!isGameOver && (\n        <InputRow\n          currentGuess={currentGuess}\n          setCurrentGuess={setCurrentGuess}\n          onSubmit={handleSubmit}\n        />\n      )}\n      {isGameOver && (\n        <div className=\"mt-5\">\n          <p>{isWinner ? 'You won!' : `Game Over! The word was ${targetWord}`}</p>\n          <button\n            className=\"mt-3 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={handleRestart}\n          >\n            Restart\n          </button>\n        </div>\n      )}\n      <div className=\"mt-5\">\n        <Keyboard letterStatuses={letterStatuses} />\n      </div>\n    </div>\n  );\n};\n\nexport default Container;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAG,yDAAyD;AACjF,MAAMC,WAAW,GAAG,CAAC;AACrB,MAAMC,WAAW,GAAG,CAAC;AAMrB,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAS,EAAE,CAAC;EACxD,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAWmB,KAAK,CAACV,WAAW,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,CAAC;EACvF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGtB,QAAQ,CAAiB,CAAC,CAAC,CAAC;EACxE,MAAM,CAACuB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd0B,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAG,CAACrB,eAAe,CAAC;MACjD,MAAMsB,IAAI,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MAC7BC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjBhB,aAAa,CAACgB,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,KAAK,CAAC,iCAAiC,CAAC;IAC1C;EACF,CAAC;EAED,MAAMC,oBAAoB,GAAIC,KAAa,IAAK;IAC9C,MAAMC,WAA2B,GAAG;MAAE,GAAGjB;IAAe,CAAC;IAEzDgB,KAAK,CAACE,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACvC,MAAMC,aAAa,GAAGF,IAAI,CAACG,iBAAiB,CAAC,CAAC;MAC9C,IAAID,aAAa,KAAK9B,UAAU,CAAC6B,KAAK,CAAC,EAAE;QACvCJ,WAAW,CAACK,aAAa,CAAC,GAAG,SAAS,CAAC,CAAC;MAC1C,CAAC,MAAM,IAAI9B,UAAU,CAACgC,QAAQ,CAACF,aAAa,CAAC,IAAIL,WAAW,CAACK,aAAa,CAAC,KAAK,SAAS,EAAE;QACzFL,WAAW,CAACK,aAAa,CAAC,GAAG,SAAS,CAAC,CAAC;MAC1C,CAAC,MAAM,IAAI,CAAC9B,UAAU,CAACgC,QAAQ,CAACF,aAAa,CAAC,EAAE;QAC9CL,WAAW,CAACK,aAAa,CAAC,GAAG,QAAQ,CAAC,CAAC;MACzC;IACF,CAAC,CAAC;IAEFrB,iBAAiB,CAACgB,WAAW,CAAC;EAChC,CAAC;EAED,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMT,KAAK,GAAGpB,YAAY,CAAC8B,IAAI,CAAC,EAAE,CAAC;IACnC,IAAIV,KAAK,CAACW,MAAM,KAAKvC,WAAW,EAAE;IAElCO,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEsB,KAAK,CAAC,CAAC;IAC/BD,oBAAoB,CAACC,KAAK,CAAC;IAE3B,IAAIA,KAAK,KAAKxB,UAAU,EAAE;MACxBa,WAAW,CAAC,IAAI,CAAC;MACjBF,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM,IAAIT,OAAO,CAACiC,MAAM,GAAG,CAAC,IAAItC,WAAW,EAAE;MAC5Cc,aAAa,CAAC,IAAI,CAAC;IACrB;IAEAN,eAAe,CAACC,KAAK,CAACV,WAAW,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAChD,CAAC;EAED,MAAM6B,aAAa,GAAGA,CAAA,KAAM;IAC1BjC,UAAU,CAAC,EAAE,CAAC;IACdE,eAAe,CAACC,KAAK,CAACV,WAAW,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5CE,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACrBI,WAAW,CAAC,KAAK,CAAC;IAClBF,aAAa,CAAC,KAAK,CAAC;IACpBG,eAAe,CAAC,CAAC;EACnB,CAAC;EAED,oBACEpB,OAAA;IAAK2C,SAAS,EAAC,kCAAkC;IAAAC,QAAA,gBAC/C5C,OAAA;MAAI2C,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzDhD,OAAA;MAAK2C,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC5BpC,OAAO,CAACyC,GAAG,CAAC,CAACnB,KAAK,EAAEK,KAAK,kBACxBnC,OAAA,CAACH,QAAQ;QAAa0B,IAAI,EAAEO,KAAM;QAACxB,UAAU,EAAEA;MAAW,GAA3C6B,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAwC,CAC7D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACL,CAAChC,UAAU,iBACVhB,OAAA,CAACJ,QAAQ;MACPc,YAAY,EAAEA,YAAa;MAC3BC,eAAe,EAAEA,eAAgB;MACjCuC,QAAQ,EAAEX;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF,EACAhC,UAAU,iBACThB,OAAA;MAAK2C,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnB5C,OAAA;QAAA4C,QAAA,EAAI1B,QAAQ,GAAG,UAAU,GAAG,2BAA2BZ,UAAU;MAAE;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxEhD,OAAA;QACE2C,SAAS,EAAC,+CAA+C;QACzDQ,OAAO,EAAET,aAAc;QAAAE,QAAA,EACxB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,eACDhD,OAAA;MAAK2C,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnB5C,OAAA,CAACF,QAAQ;QAACgB,cAAc,EAAEA;MAAe;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAlGID,SAAmB;AAAAgD,EAAA,GAAnBhD,SAAmB;AAoGzB,eAAeA,SAAS;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
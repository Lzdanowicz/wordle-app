{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzdanowicz/Desktop/wordle-app/src/components/Container.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport StartScreen from './StartScreen';\nimport InputRow from './InputRow';\nimport GuessRow from './GuessRow';\nimport Keyboard from './Keyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RANDOM_WORD_API = 'https://random-word-api.vercel.app/api';\nconst Container = () => {\n  _s();\n  const [targetWord, setTargetWord] = useState('');\n  const [wordLength, setWordLength] = useState(null);\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState([]);\n  const [letterStatuses, setLetterStatuses] = useState({});\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n  const fetchRandomWord = async length => {\n    try {\n      const response = await axios.get(`${RANDOM_WORD_API}?words=1&length=${length}`);\n      const word = response.data[0].toUpperCase();\n      setTargetWord(word);\n    } catch (error) {\n      console.error('Error fetching word:', error);\n      alert('Failed to load word. Try again.');\n    }\n  };\n  const handleStartGame = length => {\n    setWordLength(length);\n    setCurrentGuess(Array(length).fill(''));\n    fetchRandomWord(length);\n  };\n  const updateLetterStatuses = useCallback(guess => {\n    const newStatuses = {\n      ...letterStatuses\n    };\n    guess.split('').forEach((char, index) => {\n      if (char === targetWord[index]) {\n        newStatuses[char] = 'correct';\n      } else if (targetWord.includes(char) && newStatuses[char] !== 'correct') {\n        newStatuses[char] = 'present';\n      } else {\n        newStatuses[char] = 'absent';\n      }\n    });\n    setLetterStatuses(newStatuses);\n  }, [letterStatuses, targetWord]);\n  const handleSubmit = () => {\n    const guess = currentGuess.join('');\n    if (guess.length !== wordLength) return;\n    setGuesses(prev => [...prev, guess]);\n    updateLetterStatuses(guess);\n    if (guess === targetWord) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (guesses.length + 1 >= wordLength + 1) {\n      setIsGameOver(true);\n    }\n    setCurrentGuess(Array(wordLength).fill(''));\n  };\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess(Array(wordLength).fill(''));\n    setLetterStatuses({});\n    setIsWinner(false);\n    setIsGameOver(false);\n    fetchRandomWord(wordLength);\n  };\n  if (wordLength === null) {\n    return /*#__PURE__*/_jsxDEV(StartScreen, {\n      onStartGame: handleStartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-5\",\n      children: \"Wordle App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-3 mb-5\",\n      children: guesses.map((guess, index) => /*#__PURE__*/_jsxDEV(GuessRow, {\n        word: guess,\n        targetWord: targetWord\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), !isGameOver && /*#__PURE__*/_jsxDEV(InputRow, {\n      currentGuess: currentGuess,\n      setCurrentGuess: setCurrentGuess,\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: isWinner ? 'You won!' : `Game Over! The word was ${targetWord}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-3 px-4 py-2 bg-blue-500 text-white rounded\",\n        onClick: handleRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      letterStatuses: letterStatuses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Container, \"29cX/0SntT8N9hDXwPvsoOyQoUs=\");\n_c = Container;\nexport default Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","useState","useCallback","axios","StartScreen","InputRow","GuessRow","Keyboard","jsxDEV","_jsxDEV","RANDOM_WORD_API","Container","_s","targetWord","setTargetWord","wordLength","setWordLength","guesses","setGuesses","currentGuess","setCurrentGuess","letterStatuses","setLetterStatuses","isGameOver","setIsGameOver","isWinner","setIsWinner","fetchRandomWord","length","response","get","word","data","toUpperCase","error","console","alert","handleStartGame","Array","fill","updateLetterStatuses","guess","newStatuses","split","forEach","char","index","includes","handleSubmit","join","prev","handleRestart","onStartGame","fileName","_jsxFileName","lineNumber","columnNumber","className","children","map","onSubmit","onClick","_c","$RefreshReg$"],"sources":["/Users/lukaszzdanowicz/Desktop/wordle-app/src/components/Container.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport StartScreen from './StartScreen';\nimport InputRow from './InputRow';\nimport GuessRow from './GuessRow';\nimport Keyboard from './Keyboard';\n\nconst RANDOM_WORD_API = 'https://random-word-api.vercel.app/api';\n\ninterface LetterStatuses {\n  [key: string]: 'correct' | 'present' | 'absent';\n}\n\nconst Container: React.FC = () => {\n  const [targetWord, setTargetWord] = useState<string>('');\n  const [wordLength, setWordLength] = useState<number | null>(null);\n  const [guesses, setGuesses] = useState<string[]>([]);\n  const [currentGuess, setCurrentGuess] = useState<string[]>([]);\n  const [letterStatuses, setLetterStatuses] = useState<LetterStatuses>({});\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n\n  const fetchRandomWord = async (length: number) => {\n    try {\n      const response = await axios.get(`${RANDOM_WORD_API}?words=1&length=${length}`);\n      const word = response.data[0].toUpperCase();\n      setTargetWord(word);\n    } catch (error) {\n      console.error('Error fetching word:', error);\n      alert('Failed to load word. Try again.');\n    }\n  };\n\n  const handleStartGame = (length: number) => {\n    setWordLength(length);\n    setCurrentGuess(Array(length).fill(''));\n    fetchRandomWord(length);\n  };\n\n  const updateLetterStatuses = useCallback((guess: string) => {\n    const newStatuses: LetterStatuses = { ...letterStatuses };\n\n    guess.split('').forEach((char, index) => {\n      if (char === targetWord[index]) {\n        newStatuses[char] = 'correct';\n      } else if (targetWord.includes(char) && newStatuses[char] !== 'correct') {\n        newStatuses[char] = 'present';\n      } else {\n        newStatuses[char] = 'absent';\n      }\n    });\n\n    setLetterStatuses(newStatuses);\n  }, [letterStatuses, targetWord]);\n\n  const handleSubmit = () => {\n    const guess = currentGuess.join('');\n    if (guess.length !== wordLength) return;\n\n    setGuesses((prev) => [...prev, guess]);\n    updateLetterStatuses(guess);\n\n    if (guess === targetWord) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (guesses.length + 1 >= (wordLength! + 1)) {\n      setIsGameOver(true);\n    }\n\n    setCurrentGuess(Array(wordLength!).fill(''));\n  };\n\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess(Array(wordLength!).fill(''));\n    setLetterStatuses({});\n    setIsWinner(false);\n    setIsGameOver(false);\n    fetchRandomWord(wordLength!);\n  };\n\n  if (wordLength === null) {\n    return <StartScreen onStartGame={handleStartGame} />;\n  }\n\n  return (\n    <div className=\"flex flex-col items-center mt-10\">\n      <h1 className=\"text-3xl font-bold mb-5\">Wordle App</h1>\n      <div className=\"space-y-3 mb-5\">\n        {guesses.map((guess, index) => (\n          <GuessRow key={index} word={guess} targetWord={targetWord} />\n        ))}\n      </div>\n      {!isGameOver && (\n        <InputRow\n          currentGuess={currentGuess}\n          setCurrentGuess={setCurrentGuess}\n          onSubmit={handleSubmit}\n        />\n      )}\n      {isGameOver && (\n        <div className=\"mt-5\">\n          <p>{isWinner ? 'You won!' : `Game Over! The word was ${targetWord}`}</p>\n          <button\n            className=\"mt-3 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={handleRestart}\n          >\n            Restart\n          </button>\n        </div>\n      )}\n      <Keyboard letterStatuses={letterStatuses} />\n    </div>\n  );\n};\n\nexport default Container;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzdanowicz/Desktop/wordle-app/src/components/GuessRow.tsx\";\n// GuessRow.tsx\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GuessRow = ({\n  word,\n  targetWord\n}) => {\n  const getLetterStatuses = () => {\n    const statuses = Array(word.length).fill(''); // Store the status for each letter\n    const targetWordArray = targetWord.split(''); // Convert target word to array for easy tracking\n\n    // First pass: Identify correct letters (green)\n    word.split('').forEach((char, index) => {\n      if (char === targetWord[index]) {\n        statuses[index] = 'bg-green-500 text-white';\n        targetWordArray[index] = ''; // Mark as used\n      }\n    });\n\n    // Second pass: Identify present but incorrect letters (yellow)\n    word.split('').forEach((char, index) => {\n      if (!statuses[index] && targetWordArray.includes(char)) {\n        statuses[index] = 'bg-yellow-500 text-black';\n        targetWordArray[targetWordArray.indexOf(char)] = ''; // Mark as used\n      } else if (!statuses[index]) {\n        statuses[index] = 'bg-gray-500 text-white'; // Not present in word\n      }\n    });\n    return statuses;\n  };\n  const statuses = getLetterStatuses();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex gap-2 justify-center mb-2\",\n    children: word.split('').map((char, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `w-12 h-12 flex items-center justify-center text-xl font-bold rounded ${statuses[index]}`,\n      children: char\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c = GuessRow;\nexport default GuessRow;\nvar _c;\n$RefreshReg$(_c, \"GuessRow\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GuessRow","word","targetWord","getLetterStatuses","statuses","Array","length","fill","targetWordArray","split","forEach","char","index","includes","indexOf","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lukaszzdanowicz/Desktop/wordle-app/src/components/GuessRow.tsx"],"sourcesContent":["// GuessRow.tsx\nimport React from 'react';\n\ninterface GuessRowProps {\n  word: string;\n  targetWord: string;\n}\n\nconst GuessRow: React.FC<GuessRowProps> = ({ word, targetWord }) => {\n  const getLetterStatuses = (): string[] => {\n    const statuses = Array(word.length).fill(''); // Store the status for each letter\n    const targetWordArray = targetWord.split(''); // Convert target word to array for easy tracking\n\n    // First pass: Identify correct letters (green)\n    word.split('').forEach((char, index) => {\n      if (char === targetWord[index]) {\n        statuses[index] = 'bg-green-500 text-white';\n        targetWordArray[index] = ''; // Mark as used\n      }\n    });\n\n    // Second pass: Identify present but incorrect letters (yellow)\n    word.split('').forEach((char, index) => {\n      if (!statuses[index] && targetWordArray.includes(char)) {\n        statuses[index] = 'bg-yellow-500 text-black';\n        targetWordArray[targetWordArray.indexOf(char)] = ''; // Mark as used\n      } else if (!statuses[index]) {\n        statuses[index] = 'bg-gray-500 text-white'; // Not present in word\n      }\n    });\n\n    return statuses;\n  };\n\n  const statuses = getLetterStatuses();\n\n  return (\n    <div className=\"flex gap-2 justify-center mb-2\">\n      {word.split('').map((char, index) => (\n        <span\n          key={index}\n          className={`w-12 h-12 flex items-center justify-center text-xl font-bold rounded ${statuses[index]}`}\n        >\n          {char}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default GuessRow;\n\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1B,MAAMC,QAAiC,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAClE,MAAMC,iBAAiB,GAAGA,CAAA,KAAgB;IACxC,MAAMC,QAAQ,GAAGC,KAAK,CAACJ,IAAI,CAACK,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,MAAMC,eAAe,GAAGN,UAAU,CAACO,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;;IAE9C;IACAR,IAAI,CAACQ,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACtC,IAAID,IAAI,KAAKT,UAAU,CAACU,KAAK,CAAC,EAAE;QAC9BR,QAAQ,CAACQ,KAAK,CAAC,GAAG,yBAAyB;QAC3CJ,eAAe,CAACI,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;MAC/B;IACF,CAAC,CAAC;;IAEF;IACAX,IAAI,CAACQ,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACtC,IAAI,CAACR,QAAQ,CAACQ,KAAK,CAAC,IAAIJ,eAAe,CAACK,QAAQ,CAACF,IAAI,CAAC,EAAE;QACtDP,QAAQ,CAACQ,KAAK,CAAC,GAAG,0BAA0B;QAC5CJ,eAAe,CAACA,eAAe,CAACM,OAAO,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;MACvD,CAAC,MAAM,IAAI,CAACP,QAAQ,CAACQ,KAAK,CAAC,EAAE;QAC3BR,QAAQ,CAACQ,KAAK,CAAC,GAAG,wBAAwB,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC;IAEF,OAAOR,QAAQ;EACjB,CAAC;EAED,MAAMA,QAAQ,GAAGD,iBAAiB,CAAC,CAAC;EAEpC,oBACEJ,OAAA;IAAKgB,SAAS,EAAC,gCAAgC;IAAAC,QAAA,EAC5Cf,IAAI,CAACQ,KAAK,CAAC,EAAE,CAAC,CAACQ,GAAG,CAAC,CAACN,IAAI,EAAEC,KAAK,kBAC9Bb,OAAA;MAEEgB,SAAS,EAAE,wEAAwEX,QAAQ,CAACQ,KAAK,CAAC,EAAG;MAAAI,QAAA,EAEpGL;IAAI,GAHAC,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIN,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GAxCItB,QAAiC;AA0CvC,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzdanowicz/Desktop/wordle-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Types for letter status\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Constants\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst TARGET_WORD = 'APPLE'; // You can randomize this if needed\n\nconst App = () => {\n  _s();\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isWinner, setIsWinner] = useState(false);\n\n  // Handles input from keyboard\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && currentGuess.length === WORD_LENGTH) {\n      handleSubmit();\n    }\n  };\n  const handleChange = e => {\n    const value = e.target.value.toUpperCase();\n    if (value.length <= WORD_LENGTH) {\n      setCurrentGuess(value);\n    }\n  };\n  const getLetterStatus = (char, index) => {\n    if (TARGET_WORD[index] === char) return 'correct';\n    if (TARGET_WORD.includes(char)) return 'present';\n    return 'absent';\n  };\n  const handleSubmit = () => {\n    if (currentGuess.length !== WORD_LENGTH) return;\n    const newGuess = {\n      letters: currentGuess.split('').map((char, index) => ({\n        value: char,\n        status: getLetterStatus(char, index)\n      }))\n    };\n    const newGuesses = [...guesses, newGuess];\n    setGuesses(newGuesses);\n    setCurrentGuess('');\n    if (currentGuess === TARGET_WORD) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (newGuesses.length >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n  };\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess('');\n    setIsGameOver(false);\n    setIsWinner(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      children: guess.letters.map((letter, j) => /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          display: 'inline-block',\n          width: '30px',\n          height: '30px',\n          lineHeight: '30px',\n          border: '1px solid black',\n          margin: '0 5px',\n          textTransform: 'uppercase',\n          backgroundColor: letter.status === 'correct' ? 'green' : letter.status === 'present' ? 'yellow' : 'gray',\n          color: 'white'\n        },\n        children: letter.value\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)), !isGameOver && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentGuess,\n        onChange: handleChange,\n        onKeyDown: handleKeyPress,\n        maxLength: WORD_LENGTH,\n        disabled: isGameOver,\n        style: {\n          margin: '10px 0',\n          textTransform: 'uppercase'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: isWinner ? 'Congratulations! You guessed it!' : `Game Over! The word was: ${TARGET_WORD}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0itCIc1EUk/rzyW0mupBqocC6TA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","WORD_LENGTH","MAX_GUESSES","TARGET_WORD","App","_s","guesses","setGuesses","currentGuess","setCurrentGuess","isGameOver","setIsGameOver","isWinner","setIsWinner","handleKeyPress","e","key","length","handleSubmit","handleChange","value","target","toUpperCase","getLetterStatus","char","index","includes","newGuess","letters","split","map","status","newGuesses","handleRestart","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","guess","i","margin","letter","j","display","width","height","lineHeight","border","textTransform","backgroundColor","color","type","onChange","onKeyDown","maxLength","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/lukaszzdanowicz/Desktop/wordle-app/src/App.tsx"],"sourcesContent":["import React, { useState, ChangeEvent, KeyboardEvent, useEffect } from 'react';\n\n// Types for letter status\ntype LetterStatus = 'correct' | 'present' | 'absent';\n\ninterface Letter {\n  value: string;\n  status: LetterStatus;\n}\n\ninterface Guess {\n  letters: Letter[];\n}\n\n// Constants\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst TARGET_WORD = 'APPLE'; // You can randomize this if needed\n\nconst App: React.FC = () => {\n  const [guesses, setGuesses] = useState<Guess[]>([]);\n  const [currentGuess, setCurrentGuess] = useState<string>('');\n  const [isGameOver, setIsGameOver] = useState<boolean>(false);\n  const [isWinner, setIsWinner] = useState<boolean>(false);\n\n  // Handles input from keyboard\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && currentGuess.length === WORD_LENGTH) {\n      handleSubmit();\n    }\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.toUpperCase();\n    if (value.length <= WORD_LENGTH) {\n      setCurrentGuess(value);\n    }\n  };\n\n  const getLetterStatus = (char: string, index: number): LetterStatus => {\n    if (TARGET_WORD[index] === char) return 'correct';\n    if (TARGET_WORD.includes(char)) return 'present';\n    return 'absent';\n  };\n\n  const handleSubmit = () => {\n    if (currentGuess.length !== WORD_LENGTH) return;\n\n    const newGuess: Guess = {\n      letters: currentGuess.split('').map((char, index) => ({\n        value: char,\n        status: getLetterStatus(char, index),\n      })),\n    };\n\n    const newGuesses = [...guesses, newGuess];\n    setGuesses(newGuesses);\n    setCurrentGuess('');\n\n    if (currentGuess === TARGET_WORD) {\n      setIsWinner(true);\n      setIsGameOver(true);\n    } else if (newGuesses.length >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n  };\n\n  const handleRestart = () => {\n    setGuesses([]);\n    setCurrentGuess('');\n    setIsGameOver(false);\n    setIsWinner(false);\n  };\n\n  return (\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\n      <h1>Wordle Clone</h1>\n      {guesses.map((guess, i) => (\n        <div key={i} style={{ margin: '10px 0' }}>\n          {guess.letters.map((letter, j) => (\n            <span\n              key={j}\n              style={{\n                display: 'inline-block',\n                width: '30px',\n                height: '30px',\n                lineHeight: '30px',\n                border: '1px solid black',\n                margin: '0 5px',\n                textTransform: 'uppercase',\n                backgroundColor:\n                  letter.status === 'correct'\n                    ? 'green'\n                    : letter.status === 'present'\n                    ? 'yellow'\n                    : 'gray',\n                color: 'white',\n              }}\n            >\n              {letter.value}\n            </span>\n          ))}\n        </div>\n      ))}\n\n      {!isGameOver && (\n        <>\n          <input\n            type=\"text\"\n            value={currentGuess}\n            onChange={handleChange}\n            onKeyDown={handleKeyPress}\n            maxLength={WORD_LENGTH}\n            disabled={isGameOver}\n            style={{ margin: '10px 0', textTransform: 'uppercase' }}\n          />\n          <br />\n          <button onClick={handleSubmit}>Submit</button>\n        </>\n      )}\n\n      {isGameOver && (\n        <div>\n          <p>{isWinner ? 'Congratulations! You guessed it!' : `Game Over! The word was: ${TARGET_WORD}`}</p>\n          <button onClick={handleRestart}>Restart</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
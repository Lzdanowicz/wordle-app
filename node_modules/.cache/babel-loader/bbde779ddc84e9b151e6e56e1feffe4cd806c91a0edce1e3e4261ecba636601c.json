{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzdanowicz/Desktop/wordle-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst App = () => {\n  _s();\n  const [targetWord, setTargetWord] = useState('APPLE'); // Set a target word\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  // Handle user input and guess submission\n  const handleInput = e => {\n    const value = e.target.value.toUpperCase();\n    if (value.length <= WORD_LENGTH) {\n      setCurrentGuess(value);\n    }\n  };\n  const handleSubmit = () => {\n    if (currentGuess.length !== WORD_LENGTH) return;\n    const newGuess = {\n      letters: currentGuess.split('').map((char, index) => ({\n        value: char,\n        status: getLetterStatus(char, index)\n      }))\n    };\n    const updatedGuesses = [...guesses, newGuess];\n    setGuesses(updatedGuesses);\n    setCurrentGuess('');\n    if (currentGuess === targetWord || updatedGuesses.length >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n  };\n  const getLetterStatus = (char, index) => {\n    if (targetWord[index] === char) {\n      return 'correct';\n    } else if (targetWord.includes(char)) {\n      return 'present';\n    } else {\n      return 'absent';\n    }\n  };\n  const handleRestart = () => {\n    setTargetWord('GRAPE'); // You could randomize this for more variety.\n    setGuesses([]);\n    setCurrentGuess('');\n    setIsGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: guess.letters.map((letter, j) => /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          margin: '0 5px'\n        },\n        children: [letter.value, \" (\", letter.status, \")\"]\n      }, j, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)), !isGameOver ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentGuess,\n        onChange: handleInput,\n        maxLength: WORD_LENGTH,\n        disabled: isGameOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRestart,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Game Over! The word was: \", targetWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OT6WQGp7nh2+tR9QSUDGFxJ39Vw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","WORD_LENGTH","MAX_GUESSES","App","_s","targetWord","setTargetWord","guesses","setGuesses","currentGuess","setCurrentGuess","isGameOver","setIsGameOver","handleInput","e","value","target","toUpperCase","length","handleSubmit","newGuess","letters","split","map","char","index","status","getLetterStatus","updatedGuesses","includes","handleRestart","children","fileName","_jsxFileName","lineNumber","columnNumber","guess","i","letter","j","style","margin","type","onChange","maxLength","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/lukaszzdanowicz/Desktop/wordle-app/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ntype LetterStatus = 'correct' | 'present' | 'absent';\n\ninterface Letter {\n  value: string;\n  status: LetterStatus;\n}\n\ninterface Guess {\n  letters: Letter[];\n}\n\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\nconst App: React.FC = () => {\n  const [targetWord, setTargetWord] = useState<string>('APPLE'); // Set a target word\n  const [guesses, setGuesses] = useState<Guess[]>([]);\n  const [currentGuess, setCurrentGuess] = useState<string>('');\n  const [isGameOver, setIsGameOver] = useState<boolean>(false);\n\n  // Handle user input and guess submission\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.toUpperCase();\n    if (value.length <= WORD_LENGTH) {\n      setCurrentGuess(value);\n    }\n  };\n\n  const handleSubmit = () => {\n    if (currentGuess.length !== WORD_LENGTH) return;\n\n    const newGuess: Guess = {\n      letters: currentGuess.split('').map((char, index) => ({\n        value: char,\n        status: getLetterStatus(char, index),\n      })),\n    };\n\n    const updatedGuesses = [...guesses, newGuess];\n    setGuesses(updatedGuesses);\n    setCurrentGuess('');\n\n    if (currentGuess === targetWord || updatedGuesses.length >= MAX_GUESSES) {\n      setIsGameOver(true);\n    }\n  };\n\n  const getLetterStatus = (char: string, index: number): LetterStatus => {\n    if (targetWord[index] === char) {\n      return 'correct';\n    } else if (targetWord.includes(char)) {\n      return 'present';\n    } else {\n      return 'absent';\n    }\n  };\n\n  const handleRestart = () => {\n    setTargetWord('GRAPE'); // You could randomize this for more variety.\n    setGuesses([]);\n    setCurrentGuess('');\n    setIsGameOver(false);\n  };\n\n  return (\n    <div>\n      <h1>Wordle Clone</h1>\n\n      {guesses.map((guess, i) => (\n        <div key={i}>\n          {guess.letters.map((letter, j) => (\n            <span key={j} style={{ margin: '0 5px' }}>\n              {letter.value} ({letter.status})\n            </span>\n          ))}\n        </div>\n      ))}\n\n      {!isGameOver ? (\n        <>\n          <input\n            type=\"text\"\n            value={currentGuess}\n            onChange={handleInput}\n            maxLength={WORD_LENGTH}\n            disabled={isGameOver}\n          />\n          <button onClick={handleSubmit}>Submit</button>\n        </>\n      ) : (\n        <button onClick={handleRestart}>Restart</button>\n      )}\n\n      {isGameOver && <p>Game Over! The word was: {targetWord}</p>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}